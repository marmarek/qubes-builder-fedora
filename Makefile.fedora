# Generic makefile for Fedora packages build
#
# For "API" documentation check Makefile.generic
#
# Variables supposed to be in component's Makefile.builder:
#  RPM_SPEC_FILES - list of spec files to build
#  RPM_USE_MOCKBUILD - if set to 1, use new "mock" build

### Variables required Makefile.generic
# Use spec files list as PACKAGE_LIST
PACKAGE_LIST = $(strip $(RPM_SPEC_FILES) $(RPM_SRC_PACKAGES))
DIST_BUILD_DIR = /home/user

### Local variables
RUN_AS_USER = user
ifndef OUTPUT_DIR
OUTPUT_DIR= rpm
endif

# Use += to allow Makefile.builder define some initial value
RPM_BUILD_DEFINES += --define "backend_vmm $(BACKEND_VMM)"
RPM_BUILD_DEFINES += --define "dist .$(DIST)"
RPM_BUILD_DEFINES += --define "fedora $(subst fc,,$(DIST))"

### Private "functions"
# List packages produced by by given spec file(s)
RPM_QUERY_DEFINES  = --define "dist .$(DIST)"
RPM_QUERY_DEFINES += --define "fedora $(subst fc,,$(DIST))"
RPM_QUERY_DEFINES += --define "qubes_builder 1"
RPM_QUERY_DEFINES += --define "backend_vmm $(BACKEND_VMM)"

RPMSIGN_OPTS ?=
RPMSIGN_OPTS += --digest-algo=sha256
ifneq (,$(SIGN_KEY))
RPMSIGN_OPTS += --key-id=$(SIGN_KEY)
endif

ifdef REPO_PROXY
    YUM_OPTS += --setopt=proxy=$(REPO_PROXY)
endif

ifeq ($(shell expr $(subst fc,,$(DIST)) \>= 22),1)
	YUM := dnf
	YUM_BUILDDEP := dnf builddep --allowerasing --best
else
	YUM := yum
	YUM_BUILDDEP := yum-builddep
endif


# this '[ -n "$(1)" ] && ' is to suppress "call" at function definition
spec_packages = $(shell cd $(ORIG_SRC) && [ -n "$(1)" ] && \
	if [ 0`stat -c %Y $(OUTPUT_DIR)/$(notdir $(1)).list 2>/dev/null` -ge \
			0`git log -1 --pretty=format:%ct` ]; then \
		cat $(OUTPUT_DIR)/$(notdir $(1)).list; \
	else \
		$(FEDORA_PLUGIN_DIR)scripts/query-spec "$(1)" "$(RPM_QUERY_FORMAT)" 2>/dev/null; \
	fi)
srpm_packages = $(shell cd $(ORIG_SRC) && [ -n "$(1)" ] && \
	if [ 0`stat -c %Y $(OUTPUT_DIR)/$(notdir $(1)).list 2>/dev/null` -ge \
			0`git log -1 --pretty=format:%ct` ]; then \
		cat $(OUTPUT_DIR)/$(notdir $(1)).list; \
	else \
		rpm2cpio $(1) |cpio -i --to-stdout '*.spec' 2>/dev/null | \
		$(FEDORA_PLUGIN_DIR)scripts/query-spec /dev/stdin "$(RPM_QUERY_FORMAT)" 2>/dev/null; \
	fi)

dist-prep:
	@true

ifdef INCREMENT_DEVEL_VERSIONS
dist-package: devel_ver_path = $(ORIG_SRC)/$(OUTPUT_DIR)/$(notdir $(PACKAGE)).devel
dist-package: devel_ver_prev = $(shell cat $(devel_ver_path) 2>/dev/null)
dist-package: devel_ver := $(shell expr $(devel_ver_prev) + 1)
dist-package: RPM_BUILD_DEFINES += --define "dist .$(devel_ver).$(DIST)"
endif

dist-package: dist-package-build


ifeq (1,$(RPM_USE_MOCKBUILD))
include $(FEDORA_PLUGIN_DIR)Makefile-mock.fedora
else
include $(FEDORA_PLUGIN_DIR)Makefile-legacy.fedora
endif

# dist-package-build and dist-copy-out defined in Makefile-*.fedora included above

### Additional targets

# Copies requested packages (based on PACKAGE_SET, COMPONENT, DIST) to
# requested repository (UPDATE_REPO)
# Optionally saves list of copied packages in $(SNAPSHOT_FILE)
update-repo: packages  = $(foreach SPEC,$(RPM_SPEC_FILES),$(call spec_packages,$(SPEC)))
update-repo: packages += $(foreach SPEC,$(RPM_SRC_PACKAGES),$(call srpm_packages,$(SPEC)))
update-repo: update-repo-do

update-repo-do:
ifndef UPDATE_REPO
	$(error "You need to specify destination repo in UPDATE_REPO variable")
endif
ifeq (,$(PACKAGE_LIST))
	@true
else
	@mkdir -p $(UPDATE_REPO)/rpm
	@cd $(ORIG_SRC) && ln -f $(packages) $(UPDATE_REPO)/rpm/
endif
ifdef SNAPSHOT_FILE
	@cd $(ORIG_SRC) && echo $(packages) > $(SNAPSHOT_FILE)
endif

update-repo-from-snapshot: packages = $(shell cat $(SNAPSHOT_FILE) 2>/dev/null)
update-repo-from-snapshot: update-repo-from-snapshot-do

update-repo-from-snapshot-do:
ifndef UPDATE_REPO
	$(error "You need to specify destination repo in UPDATE_REPO variable")
endif
	for f in $(packages); do \
		ln -f $(subst /$(TARGET_REPO)/,/$(SNAPSHOT_REPO)/,$(UPDATE_REPO))/rpm/`basename $$f` $(UPDATE_REPO)/rpm/ || exit 1; \
	done

sign: packages  = $(foreach SPEC,$(RPM_SPEC_FILES),$(call spec_packages,$(SPEC)))
sign: packages += $(foreach SPEC,$(RPM_SRC_PACKAGES),$(call srpm_packages,$(SPEC)))
sign:
ifeq (,$(PACKAGE_LIST))
	@true
else
	@cd $(ORIG_SRC) && for pkg in $(packages); do \
		if ! rpm -K $$pkg | grep -qi pgp; then \
			setsid -w rpmsign $(RPMSIGN_OPTS) --addsign $$pkg </dev/null || exit 1; \
		fi; \
	done
endif

check-repo: packages  = $(foreach SPEC,$(RPM_SPEC_FILES),$(call spec_packages,$(SPEC)))
check-repo: packages += $(foreach SPEC,$(RPM_SRC_PACKAGES),$(call srpm_packages,$(SPEC)))
check-repo:
ifndef UPDATE_REPO
	$(error "You need to specify destination repo in UPDATE_REPO variable")
endif
	@if [ -n "$(packages)" ]; then \
		cd $(ORIG_SRC) && ls $(addprefix $(UPDATE_REPO)/rpm/, $(notdir $(packages))) >/dev/null 2>&1 || exit 1; \
	else \
		true; \
	fi
